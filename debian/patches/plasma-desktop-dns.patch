Author: Dan Leinir Turthra Jensen <admin@leinir.dk>
Description: Fix Denial of Service bug in Discover.
Forwarded: not-needed

---
 attica-kde/kdeplugin/kdeplatformdependent.cpp | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/attica-kde/kdeplugin/kdeplatformdependent.cpp b/attica-kde/kdeplugin/kdeplatformdependent.cpp
index fbc15ec4e..2c21fe7e6 100644
--- a/attica-kde/kdeplugin/kdeplatformdependent.cpp
+++ b/attica-kde/kdeplugin/kdeplatformdependent.cpp
@@ -125,6 +125,25 @@ QNetworkRequest KdePlatformDependent::addOAuthToRequest(const QNetworkRequest &r
         const QString bearer = bearer_format.arg(token);
         notConstReq.setRawHeader("Authorization", bearer.toUtf8());
     }
+
+    // Add cache preference in a granular fashion (we will almost certainly want more of these, but...)
+    static const QStringList preferCacheEndpoints{QLatin1String{"/content/categories"}};
+    for (const QString &endpoint : preferCacheEndpoints) {
+        if (notConstReq.url().toString().endsWith(endpoint)) {
+            QNetworkCacheMetaData cacheMeta{m_accessManager->cache()->metaData(notConstReq.url())};
+            if (cacheMeta.isValid()) {
+                // If the expiration date is valid, but longer than 24 hours, don't trust that things
+                // haven't changed and check first, otherwise just use the cached version to relieve
+                // server strain and reduce network traffic.
+                const QDateTime tomorrow{QDateTime::currentDateTime().addDays(1)};
+                if (cacheMeta.expirationDate().isValid() && cacheMeta.expirationDate() < tomorrow) {
+                    notConstReq.setAttribute(QNetworkRequest::CacheLoadControlAttribute, QNetworkRequest::PreferCache);
+                }
+            }
+            break;
+        }
+    }
+
     return notConstReq;
 }
 
-- 
